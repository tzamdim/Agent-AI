---
title: "AI Agents"
execute:
    cache: true
    echo: true
format: 
    revealjs:
        incremental: true
        theme: [beige, custom.scss]
        transition: fade
        chalkboard:
            theme: whiteboard
        smaller: true
        progress: true
---

<!----------------------------------------------------- Content ----------------------------------------------------->

## Content

:::: {.columns}

::: {.column width="50%"}

**Concepts**

- Description
- Representation
- Applications

:::

::: {.column width="50%"}

**Examples**

- Grid World
- Mountain Car

:::

::::

<!---------------------------------------------------- Concepts ---------------------------------------------------->

# Concepts

<!------------------------- Description -------------------------->

## Description

. . . 

**Definition**

A Markov Decision Process is a mathematical framework used to describe decision-making in situations where outcomes are partly random and partly
controlled by an agent.

. . . 

**Process**

At each time step, the agent:

- Observes the current state of the environment
- Takes an action, which may lead to a transition to a new state
- Receives a reward based on the action taken and the resulting state

. . . 

**Goal**

The goal of the agent is to maximize the cumulative reward over time by choosing the best possible actions based on the current
state.

<!------------------------ Representation ------------------------>

## Representation

. . . 

![](images/reinforcement_learning.png)

<!------------------------- Applications ------------------------->

## Applications

. . . 

**Autonomous Driving**

- State space: $\mathscr{S} = \left\{ (\text{position}, \text{speed}, \text{lane}, \text{proximity to vehicles}, \text{traffic signals})_1, \dots \right\}$

- Action space: $\mathscr{A} = \{ \text{accelerate}, \text{brake}, \text{left}, \text{right}, \text{stay} \}$

- Reward space: $\mathscr{R} = \{ \text{+1 for safe driving}, \text{-10 for collision}, \text{+5 for reaching the goal} \}$

- Model: The dynamics describe the effects of the vehicleâ€™s actions on its next state, such as how acceleration changes speed and
  position.

. . . 

**Healthcare Treatment Planning**

- State Space: $\mathscr{S} = \left\{ \big(\text{disease state}, \text{treatment response}, \text{vital signs}, \text{age} \big)_1, \dots \right\}$

- Action Space: $\mathscr{A} = \{ \text{drug A}, \text{drug B}, \text{surgery}, \text{no treatment} \}$

- Reward Space: $\mathscr{R} = \{ \text{+10 for recovery}, \text{-5 for side effects}, \text{-10 for relapse} \}$

- Model: The dynamics describe how treatments affect the patient's health, with probabilistic transitions between health states based on
  treatment and health conditions.

<!---------------------------------------------------- Examples ---------------------------------------------------->

# Examples

<!------------------------- Grid World -------------------------->

## Grid World

:::: {.columns}

::: {.column width="33%"}

**Environment**

- 2 x 2 grid
    - $s_1$ and $s_3$ are normal cells
    - $s_2$ is an obstacle
    - $s_4$ is the goal

:::

::: {.column width="33%"}

**Actions** 

- $\uparrow$  
- $\downarrow$
- $\leftarrow$
- $\rightarrow$
- $\bigcirc$

:::

::: {.column width="33%"}

**Reward**

- Moving to $s_2$ or any wall will result in a reward of $-1$
- Moving to either $s_1$ or $s_3$ will result in a reward of $0$
- Moving $s_4$ will result in a reward of $1$

:::

::::

![](images/stochastic_policy.png){.absolute top=400 left=700 width="270" height="270"}

## Mountain Car


**Train agent**
```{python}
from rlberry_scool.agents.mbqvi import MBQVIAgent
from rlberry_research.envs.classic_control import MountainCar
from rlberry.wrappers import DiscretizeStateWrapper

_env = MountainCar()
env = DiscretizeStateWrapper(_env, 20)
agent = MBQVIAgent(env, n_samples=40, gamma=0.99)
agent.fit()
```

**Interact with environment**

```{python}
env.enable_rendering()
observation, info = env.reset()
for _ in range(200):
    action = agent.policy(observation)
    observation, reward, terminated, truncated, info = env.step(action)
    done = terminated or truncated

env.save_video("video_plot_mountain_car.mp4")
```

**Last episode video**

{{< video  video_plot_mountain_car.mp4 width="250" >}}